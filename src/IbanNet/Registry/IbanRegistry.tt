<#@ template hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)src\IbanNet\bin\Debug\net45\CsvHelper.dll" #>
<#@ import namespace="CsvHelper" #>
<#@ import namespace="CsvHelper.Configuration" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;

namespace IbanNet.Registry
{
	/// <summary>
	/// The IBAN registry contains IBAN/BBAN/SEPA information for all known IBAN countries.
	/// </summary>
	[GeneratedCode("IbanRegistryT4", "1.0")]
	public class IbanRegistry : List<CountryInfo>
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="IbanRegistry" /> class.
		/// </summary>
		public IbanRegistry() {
			AddRange(
				new []
				{
					// ReSharper disable CommentTypo
					// ReSharper disable StringLiteralTypo

<#
	Func<string, string> checkValue = (value) => value == null || value == "" || value == "N/A" ? null : value.Trim();
	Func<string, string> normalizeExample = (value) => string.IsNullOrEmpty(value) ? value : Regex.Replace(value, @"[^\w]", "");

	string registryPath = this.Host.ResolvePath("swift_iban_registry_201901.txt");
	Configuration config = new Configuration
	{
		Delimiter = "\t"
	};
	using (var csv = new CsvReader(new StreamReader(registryPath, Encoding.GetEncoding(1252)), config)) {
		List<string[]> records = new List<string[]>();
		while (csv.Read())
		{
			records.Add(csv.Context.Record.Select(s => checkValue(s)).ToArray());
		}

		string[][] table = Transpose(records.Skip(1).ToArray()).Skip(1).ToArray();
		string[] includedCountries;
		foreach (string[] row in table)
		{
			var effectiveDate = DateTime.ParseExact(row[19], "MMM-yy", CultureInfo.InvariantCulture);
			var lastUpdatedDate = DateTime.ParseExact(row[42], "MMM-yy", CultureInfo.InvariantCulture);
#>
					// <#= row[0] #>
					new CountryInfo
					{
						TwoLetterISORegionName = "<#= row[1].ToUpperInvariant() #>",
						DisplayName = "<#= row[0] #>", 
						EnglishName = "<#= row[0] #>",
<#
					includedCountries = row[2] == null ? new string[0] : row[2].Split(new [] { ", " }, StringSplitOptions.RemoveEmptyEntries);
					if (includedCountries.Length > 0) {
#>
						IncludedCountries = new[]
						{
							<#
						WriteLine(string.Join(", ", includedCountries.Select(r => $"\"{row[1].ToLowerInvariant()}-{r.Substring(0, 2)}\"")));
						#>
						},
<#
					}
#>
						Bban = new BbanStructure
						{
							Length = <#= row[8] #>,
							Structure = "<#= row[7] ?? string.Empty #>",
							Example = "<#= normalizeExample(row[15]) ?? string.Empty #>",
<#
						if (row[9] != null) {
#>
							Bank = new BankStructure
							{
								Position = <#= int.Parse(row[9].Split('-')[0]) - 1 #>,
								Length = <#= int.Parse(row[9].Split('-', ' ')[1]) - int.Parse(row[9].Split('-')[0]) + 1 #>,
								Structure = "<#= row[10] ?? string.Empty #>",
								Example = "<#= normalizeExample(row[13]) ?? string.Empty #>",
							},
<#
						}

						if (row[11] != null) {
#>
							Branch = new BranchStructure
							{
								Position = <#= int.Parse(row[11].Split('-')[0]) - 1 #>,
								Length = <#= int.Parse(row[11].Split('-', ' ')[1]) - int.Parse(row[11].Split('-')[0]) + 1 #>,
								Structure = "<#= row[12] ?? string.Empty #>",
								Example = "<#= normalizeExample(row[14]) ?? string.Empty #>",
							}
<#
						}
#>
						},
						Iban = new IbanStructure
						{
							Length = <#= row[18] #>,
							Structure = "<#= row[17] ?? string.Empty #>",
							Example = "<#= normalizeExample(row[20]) ?? string.Empty #>",
							EffectiveDate = new DateTimeOffset(<#= effectiveDate.Year #>, <#= effectiveDate.Month #>, 1, 0, 0, 0, TimeSpan.Zero)
						},
						Sepa = new SepaInfo {
							IsMember = <#= ((row[3] ?? string.Empty).ToLowerInvariant() == "yes").ToString().ToLowerInvariant() + (row[3] == null ? ",\t// N/A" : ",") #>
<#
					includedCountries = row[4] == null ? new string[0] : row[4].Split(new [] { ", " }, StringSplitOptions.RemoveEmptyEntries);
					if (includedCountries.Length > 0) {
#>
							IncludedCountries = new[]
							{
								<#
						WriteLine(string.Join(", ", includedCountries.Select(r => $"\"{row[1].ToLowerInvariant()}-{r.Substring(0, 2)}\"")));
						#>
							}
<#
					}
#>
						},
						DomesticAccountNumberExample = "<#= row[5] ?? string.Empty #>",
						LastUpdatedDate = new DateTimeOffset(<#= lastUpdatedDate.Year #>, <#= lastUpdatedDate.Month #>, 1, 0, 0, 0, TimeSpan.Zero)
					},

<#
	}
}
#>
				// ReSharper restore StringLiteralTypo
				// ReSharper restore CommentTypo
			});
		}
	}
}


<#+
private string[][] Transpose(string[][] arr)
{
	// Init target buffer.
	var buffer = new string[arr[0].Length][];
	for (int i = 0; i < buffer.Length; i++)
	{
		buffer[i] = new string[arr.Length];
	}

	// Copy and transpose to target buffer.
	for (int i = 0; i < arr.Length; i++)
	{
		var line = arr[i];
		for (int j = 0; j < line.Length; j++)
		{
			buffer[j][i] = arr[i][j];
		}
	}

	return buffer;
}
#>