@page
@model Models.InputModel
@{
	ViewData["Title"] = "Web API 2";
}

<h2>@ViewData["Title"]</h2>

<div class="row" id="all-errors" style="display: none;">
	<div class="col-md-6">
		<div class="validation-summary-errors alert alert-danger" data-valmsg-summary="true">
			<ul></ul>
		</div>
	</div>
</div>

<div class="row" id="success" style="display: none;">
	<div class="col-md-6">
		<div class="alert alert-success">
			The IBAN appears to be valid.
		</div>
	</div>
</div>

<div class="row">
	<div class="col-md-6">
		<div class="form-group">
			<label asp-for="BankAccountNumber" class="control-label"></label>
			<div>
				<input asp-for="BankAccountNumber" class="form-control" />
				<span asp-validation-for="BankAccountNumber"></span>
			</div>
		</div>
	</div>
</div>

<div class="row">
	<div class="col-md-6">
		<div class="form-group">
			<button type="submit" class="btn btn-default">Save</button>
		</div>
	</div>
</div>

<div class="row">
	<div class="col-md-6">
		<div class="form-group">
			<a href="javascript:setBankAccountNumber('NL91ABNA0417164300')">Set valid</a> | <a href="javascript:setBankAccountNumber('NL92ABNA041716430')">Set invalid</a> | <a href="javascript:setBankAccountNumber('')">Set empty</a>
		</div>
	</div>
</div>

<div class="row">
	<div class="col-md-12">
		<pre style="background: none; border: none; padding: 0; height: 400px;"><code style="min-height: 400px; border-color: #e0e0e0;"></code></pre>
	</div>
</div>

<link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/zenburn.min.css" />
<script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js"></script>

<script type="text/javascript">
	// This script won't work on all browers!

	$(document).ready(_ => {
		const codePanel = $("code:first");
		hljs.highlightBlock(codePanel[0]);

		const highlight = (value, language) => {
			const c = $('<code />').addClass(language).text(value);
			hljs.highlightBlock(c[0]);
			return c[0].innerHTML;
		}

		/**
		 * Adds value to the log, optionally formatting with specified language.
		 * @@param {string} value The value to add to the log.
		 * @@param {string} language Any of the HighlightJS common languages.
		 */
		const appendLog = (value, language) => {
			if (language) {
				if (language === "json") {
					value = JSON.stringify(value, null, 2);
				}
				value = highlight(value, language);
			}
			codePanel.append((value || "") + "\n");
			const parent = codePanel[0].parentElement;
			parent.scrollTop = parent.scrollHeight - $(parent).height();
		}

		const successPanel = $("#success");
		const failurePanel = $("#all-errors");
		const failureList = $("ul", failurePanel);
		/**
		 * Updates the summary from the model state.
		 * @@param {Object<string, Array<>>} modelStateDict A dictionary with model state.
		 */
		const updateSummary = modelStateDict => {
			successPanel.hide();
			failurePanel.hide();
			failureList.empty();

			// Hide individual errors.
			$("[data-valmsg-for]").hide();

			if (modelStateDict) {
				// Show individual errors and append to summary.
				Object.keys(modelStateDict).forEach(key => {
					const errors = modelStateDict[key];
					$(`[data-valmsg-for='${key}']`).show().text(errors[0]);
					failureList.append($("<li />").text(errors[0]));
				});

				failurePanel.show();
			} else {
				successPanel.show();
			}
		}

		/**
		 * Set values from model to view.
		 */
		const populateView = data => {			
			Object.keys(data).forEach(key => {
				$(".form-control")
					.filter((i, e) => {
						return (e.id || "").toLowerCase() === key.toLocaleLowerCase();
					})
					.val(data[key]);
			});
		}

		var xhr = null;
		$(document).on("click", "button", _ => {
			if (xhr) {
				appendLog(" - Aborting previous request", "http");
				appendLog();
				xhr.abort();
			}

			const data = {};
			$(".form-control").each((_, e) => {
				data[e.id] = e.value;
			});
			appendLog("POST /api/WebApi HTTP/1.1", "http");
			appendLog(data, "json");

			xhr = $.ajax({
					type: "POST",
					url: "../api/WebApi",
					data: JSON.stringify(data),
					dataType: "json",
					contentType: "application/json"
				})
				.done((data, _, xhr) => {
					appendLog(`\nResponse: ${xhr.status}`, "http");
					appendLog(data, "json");
					populateView(data);
					updateSummary();
				})
				.fail(err => {
					appendLog(`\nResponse: ${err.status}`, "http");
					var data;
					if (err.responseText && err.status === 400) {
						const modelError = data = JSON.parse(err.responseText);
						if (modelError && modelError.ModelState && Object.keys(modelError.ModelState).length) {
							updateSummary(modelError.ModelState);
						}
					} else {
						data = err;
					}
					appendLog(data, "json");
				})
				.complete(_ => {
					xhr = null;
					appendLog("\n----\n");
				});
		});
	});
</script>